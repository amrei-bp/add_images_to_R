[
  {
    "objectID": "images_in_R_plots.html",
    "href": "images_in_R_plots.html",
    "title": "",
    "section": "",
    "text": "pngs in plotsPre-requisites: CodeShow All CodeHide All CodeView Source\n\n\n\n\n\nPre-requisites:\nThe following chunk sets up rules for all the chunks in the document. I set the knits options for the chunks so that by default messages generated by R are not displayed.\nPlease notice the alternative way to name the chunk (within the curly brackets, and not after the #| as we’ve seen before). Similarly, other YAML options that we have seen listed after #| could be just used within the curly brackets. For example `{r chunk_name, include=FALSE}.\n\n\nClick here to show the code\nknitr::opts_chunk$set(message = FALSE)\n\n\nIn this second package I load all the necessary packages. I also use herefor file referencing and automatic working directory setting.\n\n\nClick here to show the code\npacman::p_load(here, tidyverse, ggimage, palmerpenguins, dplyr, ggpattern, patchwork, png, rasterImage, grid)\nhere::i_am(\"images_in_R_plots.qmd\")\n\n\n\n\nAdd an image in R plot\nHere I want to show you how to add images to your plot. There are different ways to do this, depedning on what you would like to achieve.\nChoose a tab for different ways to add the logo image to ggplots:\n\nusing ggimageinside geomsusing patchwork\n\n\nAdapted from Albert Rapp’s blog post on the topic.\nThe following is a plot using the Palmer Penguins Data Set taken from their examples.\n\n\nClick here to show the code\nmass_flipper &lt;- ggplot(data = penguins, \n                       aes(x = flipper_length_mm,\n                           y = body_mass_g)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\") +\n  theme(legend.position.inside = c(0.2, 0.7),\n        plot.title.position = \"plot\",\n        plot.caption = element_text(hjust = 0, face= \"italic\"),\n        plot.caption.position = \"plot\")\n\nmass_flipper\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRepetition - think back\n\n\n\nAre you familiar with all the different parts of the plot? Does anything look familiar from earlier exercises?\n\n\nNow we want to add the logo to the plot.\nWith ggimage we can add an image in a separate geom_image() and position the image within the plot on the same coordinates that are also used in the original plot:\n\n\nClick here to show the code\nggplot(data = penguins, \n                       aes(x = flipper_length_mm,\n                           y = body_mass_g)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\") +\n  theme(legend.position.inside = c(0.2, 0.7),\n        plot.title.position = \"plot\",\n        plot.caption = element_text(hjust = 0, face= \"italic\"),\n        plot.caption.position = \"plot\")+\n  geom_image(\n    data = tibble(flipper_length_mm = 220, body_mass_g = 3000),\n    aes(image = \"penguin_logo.png\")\n  )\n\n\n\n\n\n\n\n\n\nWe can then adjust the size of the logo with size:\n\n\nClick here to show the code\nggplot(data = penguins, \n                       aes(x = flipper_length_mm,\n                           y = body_mass_g)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       x = \"Flipper length (mm)\",\n       y = \"Body mass (g)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\") +\n  theme(legend.position.inside = c(0.2, 0.7),\n        plot.title.position = \"plot\",\n        plot.caption = element_text(hjust = 0, face= \"italic\"),\n        plot.caption.position = \"plot\")+\n  geom_image(\n    data = tibble(flipper_length_mm = 220, body_mass_g = 3000),\n    aes(image = \"penguin_logo.png\"),\n    size = 0.5\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nSee how the image is restricted to the plotting area and cut off?\n\n\n\n\nAdapted from Albert Rapp’s blog post on the topic.\nWith this technique we can spice up the plot inside ggplot geoms. Now we will pretend that the following plot is pengion related and add an image inside the geom_tiles (downloaded from flaticon).\n\n\nClick here to show the code\ntibble(id = 0:22, row = id %% 5, col = id %/% 5) |&gt; \n  ggplot(aes(x = col, y = row)) +\n  geom_tile(fill = 'dodgerblue4', col = 'white', linewidth = 1) +\n  coord_equal() +\n  labs(title = 'blue waffle') +\n  theme_void(base_size = 18)\n\n\n\n\n\n\n\n\n\n\n\nClick here to show the code\nlibrary(ggpattern)\ntibble(id = 0:22, row = id %% 5, col = id %/% 5) |&gt; \n  ggplot(aes(x = col, y = row)) +\n  geom_tile_pattern(\n    fill = 'dodgerblue4', \n    col = 'white', \n    linewidth = 1,\n    pattern = 'image',\n    pattern_filename = 'penguin.png'\n  ) +\n  coord_equal() +\n  labs(\n    title = 'happy waffle',\n    caption = 'Flaticon Icon by Flat Icons'\n  ) +\n  theme_void(base_size = 18)\n\n\n\n\n\n\n\n\n\nMore modifications you can make to this plot can be found in the original blog post.\n\n\nWith the package png we can make a r object out of the penguin logo (there are corresponding packages for jpeg files for example).\nWith the function rasterGrob from the grid package we can transform this r object into a ggplot compatible object.\nWe can then use patchwork’s ìnset_element()`function to place the image into the plot.\n\n\nClick here to show the code\nimg &lt;- readPNG(\"penguin_logo.png\")\n\n# Convert to rasterGrob for use in ggplot from package grid\nimg_grob &lt;- rasterGrob(img, interpolate = TRUE)\n\nbill_len_dep &lt;- ggplot(data = penguins,\n                         aes(x = bill_length_mm,\n                             y = bill_depth_mm,\n                             group = species)) +\n  geom_point(aes(color = species, \n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin bill dimensions\",\n       x = \"Bill length (mm)\",\n       y = \"Bill depth (mm)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\") +\n  theme(legend.position = c(0.85, 0.15),\n        plot.title.position = \"plot\",\n        plot.caption = element_text(hjust = 0, face= \"italic\"),\n        plot.caption.position = \"plot\")\n\nbill_len_dep + inset_element(img_grob, 0.6, 0.6, 1, 1)\n\n\n\n\n\n\n\n\n\nWe can also use the output from rasterGrob to place plots side by side:\n\n\nClick here to show the code\nbill_len_dep + img_grob\n\n\n\n\n\n\n\n\n\nMore on using patchwork to insert images to ggplot plots can be found here.",
    "crumbs": [
      "pngs in plots",
      "Pre-requisites:"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Code",
    "crumbs": [
      "How to contribute"
    ]
  },
  {
    "objectID": "index.html#fork-this-repository",
    "href": "index.html#fork-this-repository",
    "title": "",
    "section": "Fork this repository",
    "text": "Fork this repository\n\nclick the waving octocat in the top right corner, she will bring you to the repository on Github.\nfork this repository into your own account (click in the fork/triton symbol that says “fork”, and follow the instructions).",
    "crumbs": [
      "How to contribute"
    ]
  },
  {
    "objectID": "index.html#clone-your-copy-to-the-local-computer",
    "href": "index.html#clone-your-copy-to-the-local-computer",
    "title": "",
    "section": "Clone your copy to the local computer",
    "text": "Clone your copy to the local computer\n\nclone the repository to your local computer (click on the green “Code” button, choose “local” and “SSH”, then enter the copied url to a new project in Rstudio).",
    "crumbs": [
      "How to contribute"
    ]
  },
  {
    "objectID": "index.html#add-the-part-you-want-to-add",
    "href": "index.html#add-the-part-you-want-to-add",
    "title": "",
    "section": "Add the part you want to add",
    "text": "Add the part you want to add\n\nadd a new .qmd file with a descriptive name\nadd the .qmd file to the _quuarto.yml file\nmake changes to the .qmd file\ntest the render of the homepage\nstage the changes, commit them, push them to Github.",
    "crumbs": [
      "How to contribute"
    ]
  },
  {
    "objectID": "index.html#make-a-pull-request",
    "href": "index.html#make-a-pull-request",
    "title": "",
    "section": "Make a pull request",
    "text": "Make a pull request\nThis is to ask me to add your code to the repository.\n\nclick on “Contribute”\nclick on “Open pull request”\ntowards the top there will be a section “Compare changes” that says “Choose two branches to see what’s changed or to start a new pull request.”\non the left, choose the amrei-bp repository, and change the “base” to “new_features”\nfill in the information about your new feature and\n“Create pull request”",
    "crumbs": [
      "How to contribute"
    ]
  },
  {
    "objectID": "index.html#wait-for-me-to-give-you-feedback-or-approve-your-changes",
    "href": "index.html#wait-for-me-to-give-you-feedback-or-approve-your-changes",
    "title": "",
    "section": "Wait for me to give you feedback or approve your changes",
    "text": "Wait for me to give you feedback or approve your changes\n\nyou will get a message in your e-mail when I do",
    "crumbs": [
      "How to contribute"
    ]
  },
  {
    "objectID": "index.html#sync-your-fork",
    "href": "index.html#sync-your-fork",
    "title": "",
    "section": "Sync your fork",
    "text": "Sync your fork\nMake sure you copy of my repository is up to date.\n\nclick on “Sync fork”",
    "crumbs": [
      "How to contribute"
    ]
  },
  {
    "objectID": "index.html#pull-the-changes-to-your-local-repository",
    "href": "index.html#pull-the-changes-to-your-local-repository",
    "title": "",
    "section": "Pull the changes to your local repository",
    "text": "Pull the changes to your local repository\n\nin Rstudio, click the pull button (downward arrow) in the git tab to pull the changes into your local directory",
    "crumbs": [
      "How to contribute"
    ]
  },
  {
    "objectID": "quarto_maps.html",
    "href": "quarto_maps.html",
    "title": "",
    "section": "",
    "text": "maps in quartoFirst map CodeShow All CodeHide All CodeView Source\n\n\n\n\nWith the leaflet package, it is easy to include an interactive map into a quarto document.\n\n\nClick here to show the code\npacman::p_load(here, leaflet)\nhere::i_am(\"images_in_R_plots.qmd\")\n\n\n\nFirst map\nThis example is taken from their documentation.\n\n\nClick here to show the code\n# Load the library.\nlibrary(leaflet)\n\n# Make a map\nleaflet() %&gt;%\n  addTiles() %&gt;% # Add default OpenStreetMap map tiles\n  addMarkers(lng = 174.768, lat = -36.852, popup = \"The birthplace of R\")\n\n\n\n\n\n\nHere is an alternative way to achieve the same thing, without using pipes in the code:\n\n\nClick here to show the code\nm &lt;- leaflet()\nm &lt;- addTiles(m)\nm &lt;- addMarkers(m, lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\nm\n\n\n\n\n\n\n\n\nLet’s find SLU on the map\n\n\nClick here to show the code\nlibrary(leaflet)\nm &lt;- leaflet() %&gt;% addTiles()\nm  # a map with the default OSM tile layer\n\n\n\n\n\n\n\n\nClick here to show the code\nm %&gt;% fitBounds(0, 62, 1, 15)",
    "crumbs": [
      "maps in quarto",
      "First map"
    ]
  },
  {
    "objectID": "interactive_graphs.html",
    "href": "interactive_graphs.html",
    "title": "",
    "section": "",
    "text": "interactive graphsinteractive_graphs.html Code\n\n\n\n\nHere is a nice gallery of interactive graphs in R.",
    "crumbs": [
      "interactive graphs",
      "interactive_graphs.html"
    ]
  }
]